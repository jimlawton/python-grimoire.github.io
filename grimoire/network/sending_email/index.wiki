! Problem:

You want to send an e-mail message that has been generated by Python code. Many
applications require sending e-mail automatically. Most Web sites have a
feedback form where submissions will be sent to maintenance staff. Python
programs that are executed automatically may send their output to the person
responsible for them, or may send an e-mail if the program can't run
successfully because of an error condition, such as a full disk partition. 
 
! Solution:

The way to do it is to use the <<PythonModule smtplib>> module: 
 
{{{
import smtplib

message = """From: sender@example.com
Subject: Sample E-mail

Hi!
This message is just to say hello, and has been automatically generated.
"""

S = smtplib.SMTP('mail.example.com')
errdict = S.sendmail( from_addr = 'sender@example.com',
              to_addrs = ['receiver@example.com'],
                     msg = message)
if len(errdict) != 0:
   print 'Not all addresses accepted'
   print 'Failed addresses:', errdict.keys()
}}}
 
The Simple Mail Transfer Protocol ([[SMTP]]) is the most common protocol used
for sending mail. On Unix systems, [[SMTP]] mail is most commonly handled by
the {{{sendmail}}} daemon, though there are several alternative mail transport
agents, such as {{{exim}}} and {{{qmail}}}, that also implement [[SMTP]]. 
 
The format of [[SMTP]] e-mail messages is defined in <<RFC 822>>. A message
consists of a header followed by the actual content of the message. The end of
the header is indicated by a blank line. A sample <<RFC 822>> message looks
like this: 
 
{{{
Return-Path: <amk>
Received: (from amk@localhost)
       by 207-172-99-98.s98.tnt13.ann.erols.com (8.8.7/8.8.7) id QAA00866
       for amk; Sun, 14 Feb 1999 16:55:57 -0500
Date: Sun, 14 Feb 1999 16:55:57 -0500
From: "A.M. Kuchling" <amk@mira.example.com>
CC: other-person@example.com
Message-Id: <199902142155.QAA00866@mira.example.com>
To: amk@mira.example.com
Subject: Hi!

Hello!  Long time no hear...
}}}
 
Each header line contains a header name, such as "{{{From}}}" or "{{{CC}}}".
Header names are case-insensitive, so it doesn't matter whether the name is
"{{{FROM}}}" or "{{{From}}}". A colon separates the header name from the
header's contents. <<RFC 822>> defines various standard header names for
specifying the recipient's address, the sender's name, addresses to which
carbon copies should be sent, etc. 

You can add your own headers by following a naming convention; header names
beginning with "{{{X-}}}" are considered extensions, and won't be mangled or
dropped by the programs transporting the mail. For example,if you're writing a
set of scripts which will send an e-mail on completion, you might want to add a
header giving the name of the script sending the mail. This header could be
called "{{{X-Script-Name}}}". Don't invent headers whose names don't begin with
"{{{X-}}}", because a mail transport agent might drop them along the path from
the sender to the recipient. To create headers, simply add them to the header
of your message: 
 
{{{
message = """From: sender@example.com
Cc: testing@example.com
X-Script-Name: mailnotify.py
Subject: Sample E-mail

Hi!  ... """
}}}
 
Proprietary mail systems, such as cc:Mail from Lotus, or platform-specific
interfaces such as Microsoft's MAPI, don't use [[SMTP]], so the <<PythonModule
smtplib>> module won't help you use such systems. If you're trying to use such
a system, you'll have to either access them through some platform-specific
mechanism such as Microsoft's COM, or write a [[C]] extension module
specifically for the mail interface. 

On Unix-like systems, it's also possible to send mail by running a mail program
(such as {{{/usr/lib/sendmail}}}) in a subprocess and sending it the message
over a pipe; this can be done by the {{{os.popen()}}} function. Using a mail
program has some drawbacks; it assumes that mail service is correctly
configured on the machine, and the location of the sendmail program may vary
between systems; {{{/usr/lib/sendmail}}} is most common, but alternative
locations such as {{{/usr/sbin/sendmail}}} have been seen. (Refer to the manual
page for {{{sendmail}}}.) Worst of all, if an error occurs, the subprocess may
just print an error message which will then be ignored by your program. Using
<<PythonModule smtplib>> is often the better course. 
 
Here's an example, in case you still need to send mail this way: 
 
{{{
SENDMAIL = "/usr/sbin/sendmail" # sendmail location
import os
p = os.popen("%s -t" % SENDMAIL, "w")
p.write("To: recipient@example.com\n")
p.write("Subject: test\n")
p.write("\n") # blank line separating headers from body
p.write("Some text\n")
p.write("some more text\n")
sts = p.close()
if sts != 0:
   print "Sendmail exit status", sts
}}}
 
